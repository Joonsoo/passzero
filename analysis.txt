* 별도 서버

1. 사용자가 기억하는 비밀번호
2. 로컬 디바이스에 저장된 랜덤 생성 키
3. 1의 비밀번호가 있어야만 접근 가능한 서버 데이터

1이 털리면 -> 3도 털리지만 2가 없어서 내용은 알 수 없음
2가 털리면 -> 1, 3에 영향 없음
3이 털리면 -> 1, 2에 영향 없음(1의 해쉬값은 알 수 있지만 암호화에 사용되는 건 다른 방식으로 생성되는 해쉬값)


* 구글 드라이브

1. 사용자가 기억하는 비밀번호
2. 로컬 디바이스에 저장된 랜덤 생성 키
3. 별도 방식으로(로컬이 털리면 알 수 있을 가능성이 높은) 접근 가능한 서버 데이터

1이 털리면 -> 2, 3에 영향 없음
2가 털리면 -> 1에 영향 없음, 로컬디바이스가 털리면 3도 털릴 가능성이 높음
3이 털리면 -> 1, 2에 영향 없음(1의 해쉬값 저장할 필요 없음)


* 서버 데이터 저장 구조

root: 기본값=/passzero
vaultId, itemId는 (알파벳+숫자 36자) * (12글자)로 랜덤생성

<root>/<vaultId>/vault           -> vault에 대한 정보 저장(vault 이름 등등)
<root>/<vaultId>/<itemId>        -> item에 대한 overview 정보(이름, 검색에 사용될 정보들)
<root>/<vaultId>/<itemId>.detail -> item에 대한 detail 정보(비밀번호, 기타 비밀 정보들)


로컬에 저장될 정보
a. 로컬 랜덤 키
b. google drive api 에 접근할 때 필요한 정보(아마도 access token 등의 형태?)
=> 사용자 암호로 한단계 암호화해서 저장한다
	-> 2가 털려도 1이 없으면 a 값을 알 수 없다
	-> 2가 털려도 1이 없으면 b 값을 알 수 없으므로 3의 내용을 알 수 없다
		(단, 2 컴퓨터의 다른 위치에서 3에 자동로그인했을 가능성이 높으므로 2가 털리면 3의 내용은 볼 수 있을 가능성이 높다)
